#!/usr/bin/env python
#
import os
import ftplib

from optparse import OptionParser
from ConfigParser import ConfigParser, NoSectionError
from subprocess import Popen, PIPE, CalledProcessError

def configParser(_section, _file='/etc/rupload.conf'):
    config = ConfigParser()
    try:
        config.read(_file)
        infos = {}
        for option in config.options(_section):
            infos.update({option: config.get(_section, option)})
        return infos
    except NoSectionError, error:
        raise Exception(error)
 
def getFiles(_spec):
    try:
        path = Popen([ 'rpm', '--eval', '%{_topdir}' ], stdout=PIPE, \
            stderr=PIPE).stdout.readline().strip()

        files = Popen([ 'rpm', '-q', '--qf', '%{NAME}-%{VERSION}-%{RELEASE}\n',\
            '--specfile', _spec ], stdin=PIPE, stdout=PIPE, \
            stderr=PIPE).stdout.readlines()
    except CalledProcessError, error:
        raise Exception(error)

    rpms = []
    for d in [ 'RPMS/x86_64', 'RPMS/noarch', 'SRPMS' ]:
        if os.path.isdir(os.path.join(path, d)):
            for f in os.listdir(os.path.join(path, d)):
                rpms.append(os.path.join(path, d, f))

    files = [ pkg for pkg in rpms if
        '.'.join(os.path.basename(pkg).split('.')[:-2])
        in [ f.strip() for f in files ] ]

    return files

def uploadFiles(_repo, _spec):
    infos = configParser(_repo)
    try:
        ftp = ftplib.FTP(infos['host'], infos['login'], infos['password'])
        ftp.cwd(infos['incoming'])
        if infos['passive']:
            ftp.set_pasv(1)
        print ("Uploading files to %s" % _repo)
        for f in getFiles(_spec):
            name = os.path.basename(f.strip())
            ftp.storbinary("STOR %s" % name, open(f.strip(), 'rb'))
            print "Uploading %s" % name
    except ftplib.error_perm, error:
        raise Exception("Error: FTP %s" % repr(error))
    except TypeError, error:
        raise Exception(error)
    except ftplib.error_reply, error:
        raise Exception(error)

    ftp.quit()

if __name__ == '__main__':
    parser = OptionParser("%prog [options] args")
    parser.add_option("-t", "--to", dest="repo", help="Repository name")
    parser.add_option("-s", "--spec", dest="spec", help="Spec file")
    (opts, args) = parser.parse_args()
    if not opts.repo or not opts.spec:
        parser.print_help()
    else:
        uploadFiles(opts.repo, opts.spec)
